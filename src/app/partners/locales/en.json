{
  "immersive_weathering.area_condition.type": "Type",
  "immersive_weathering.area_condition.type.generate_if_not_too_many": "Generate if not too many",
  "immersive_weathering.area_condition.type.neighbor_based_generation": "Neighbor based generation",
  "immersive_weathering.area_condition.generate_if_not_too_many.radiusX": "Radius X",
  "immersive_weathering.area_condition.generate_if_not_too_many.radiusY": "Radius Y",
  "immersive_weathering.area_condition.generate_if_not_too_many.radiusZ": "Radius Z",
  "immersive_weathering.area_condition.generate_if_not_too_many.requiredAmount": "Required amount",
  "immersive_weathering.area_condition.generate_if_not_too_many.yOffset": "Y offset",
  "immersive_weathering.area_condition.generate_if_not_too_many.must_have": "Must have",
  "immersive_weathering.area_condition.generate_if_not_too_many.must_not_have": "Must not have",
  "immersive_weathering.area_condition.generate_if_not_too_many.includes": "Includes",
  "immersive_weathering.area_condition.neighbor_based_generation.must_have": "Must have",
  "immersive_weathering.area_condition.neighbor_based_generation.must_not_have": "Must not have",
  "immersive_weathering.area_condition.neighbor_based_generation.required_amount": "Required amount",
  "immersive_weathering.area_condition.neighbor_based_generation.directions": "Directions",
  "immersive_weathering.area_condition.neighbor_based_generation.directions.entry": "Direction",
  "immersive_weathering.block_growth.area_condition": "Area conditions",
  "immersive_weathering.block_growth.position_predicates": "Position predicates",
  "immersive_weathering.block_growth.position_predicates.entry": "Position test",
  "immersive_weathering.block_growth.growth_chance": "Growth chance",
  "immersive_weathering.block_growth.growth_for_face": "Growth for face",
  "immersive_weathering.block_growth.growth_for_face.entry": "Face",
  "immersive_weathering.block_growth.growth_for_face.entry.direction": "Direction",
  "immersive_weathering.block_growth.growth_for_face.entry.weight": "Weight",
  "immersive_weathering.block_growth.growth_for_face.entry.growth": "Growth",
  "immersive_weathering.block_growth.growth_for_face.entry.growth.entry.data": "Block pair",
  "immersive_weathering.block_growth.growth_for_face.entry.growth.entry.weight": "Weight",
  "immersive_weathering.block_growth.owners": "Owners",
  "immersive_weathering.block_growth.owners.entry": "Block",
  "immersive_weathering.block_growth.replacing_target": "Replacing target",
  "immersive_weathering.block_growth.target_self": "Target self",
  "immersive_weathering.block_growth.destroy_target": "Destroy target",
  "immersive_weathering.block_pair.block": "Block",
  "immersive_weathering.block_pair.above_block": "Above block",
  "immersive_weathering.position_test.predicate_type": "Predicate type",
  "immersive_weathering.position_test.predicate_type.biome_match": "Biome match",
  "immersive_weathering.position_test.predicate_type.day_test": "Day test",
  "immersive_weathering.position_test.predicate_type.nand": "NAND",
  "immersive_weathering.position_test.predicate_type.precipitation_test": "Precipitation test",
  "immersive_weathering.position_test.predicate_type.temperature_range": "Temperature range",
  "immersive_weathering.position_test.biome_match.biomes": "Biomes",
  "immersive_weathering.position_test.day_test.day": "Day",
  "immersive_weathering.position_test.nand.predicates": "Predicates",
  "immersive_weathering.position_test.precipitation_test.precipitation": "Precipitation",
  "immersive_weathering.position_test.temperature_range.min": "Min",
  "immersive_weathering.position_test.temperature_range.max": "Max",
  "immersive_weathering.position_test.temperature_range.use_local_pos": "Use local pos",
  "immersive_weathering:rule_test.always_true": "Always true",
  "immersive_weathering:rule_test.block_match": "Block match",
  "immersive_weathering:rule_test.blockstate_match": "Block state match",
  "immersive_weathering:rule_test.random_block_match": "Random block match",
  "immersive_weathering:rule_test.random_blockstate_match": "Random block state match",
  "immersive_weathering:rule_test.tag_match": "Tag match",
  "immersive_weathering:rule_test.immersive_weathering:block_set_match": "Block set match",
  "immersive_weathering:rule_test.immersive_weathering:fluid_match": "Fluid match",
  "immersive_weathering:rule_test.immersive_weathering:tree_log": "Tree log",

  "lithostitched:modifier_type.lithostitched:add_biome_spawns": "Add biome spawns",
  "lithostitched:modifier_type.lithostitched:add_features": "Add features",
  "lithostitched:modifier_type.lithostitched:add_structure_set_entries": "Add structure set entries",
  "lithostitched:modifier_type.lithostitched:add_surface_rule": "Add surface rule",
  "lithostitched:modifier_type.lithostitched:add_template_pool_elements": "Add template pool elements",
  "lithostitched:modifier_type.lithostitched:no_op": "Nothing",
  "lithostitched:modifier_type.lithostitched:redirect_feature": "Redirect feature",
  "lithostitched:modifier_type.lithostitched:remove_biome_spawns": "Remove biome spawns",
  "lithostitched:modifier_type.lithostitched:remove_features": "Remove features",
  "lithostitched:modifier_type.lithostitched:remove_structures_from_structure_set": "Remove structures from set",
  "lithostitched:modifier_type.lithostitched:replace_climate": "Replace climate",
  "lithostitched:modifier_type.lithostitched:replace_effects": "Replace effects",
  "lithostitched:modifier_predicate_type.lithostitched:all_of": "All of",
  "lithostitched:modifier_predicate_type.lithostitched:any_of": "Any of",
  "lithostitched:modifier_predicate_type.lithostitched:mod_loaded": "Mod loaded",
  "lithostitched:modifier_predicate_type.lithostitched:not": "Not",
  "lithostitched:modifier_predicate_type.lithostitched:true": "True",

  "obsidian:item.information": "Item Information",
  "obsidian:item_information.rarity": "Rarity",
  "obsidian:item_information.creative_tab": "Creative Tab",
  "obsidian:item_information.max_stack_size": "Max Stack Size",
  "obsidian:item_information.name": "Item Name",
  "obsidian:item_information.has_enchantment_glint": "Has Enchantment Glint",
  "obsidian:item_information.is_enchantable": "Is Enchantable",
  "obsidian:item_information.enchantability": "Enchantability",
  "obsidian:item_information.use_duration": "Item Duration",
  "obsidian:item_information.can_place_block": "Can Place Block",
  "obsidian:item_information.placable_block": "Placable Block",
  "obsidian:item_information.wearable": "Wearable",
  "obsidian:item_information.default_color": "Default Color",
  "obsidian:item_information.wearable_slot": "Wearable Slot",
  "obsidian:item_information.custom_render_mode": "Has display-based models",
  "obsidian:item_information.render_mode_models": "Display-based Models",
  "obsidian:item.display": "Display",
  "obsidian:item.display.model": "Model",
  "obsidian:item.display.item_model": "Item Model",
  "obsidian:item.display.lore": "Lore",
  "obsidian:item.use_action": "Use Action",
  "obsidian:item.use_action.action": "Action",
  "obsidian:item.use_action.right_click_action": "Right Click Action",
  "obsidian:item.use_action.command": "Command",
  "obsidian:item.use_action.url": "URL",
  "obsidian:item.use_action.gui_size": "GUI Size",
  "obsidian:item.use_action.gui_title": "GUI Title",

  "obsidian:block.block_type": "Block Type",
  "obsidian:block.information": "Block Information",
  "obsidian:block_information.rarity": "Rarity",
  "obsidian:block_information.creative_tab": "Creative Tab",
  "obsidian:block_information.max_stack_size": "Max Stack Size",
  "obsidian:block_information.name": "Item Name",
  "obsidian:block_information.sound_group_type": "Sound Group Type",
  "obsidian:block_information.vanilla_sound_group": "Vanilla Sound Group",
  "obsidian:block_information.custom_sound_group": "Custom Sound Group",
  "obsidian:block_information.material_type": "Material Type",
  "obsidian:block_information.vanilla_material": "Vanilla Material",
  "obsidian:block_information.custom_material": "Custom Material",
  "obsidian:block.display": "Display",
  "obsidian:block.additional_information": "Additional Information",
  "obsidian:block.ore_information": "Ore Information",
  "obsidian:block.food_information": "Food Information",
  "obsidian:block.block_type.CAMPFIRE.campfire_properties": "Campfire Properties",
  "obsidian:block.can_plant_on": "Can Plant On",
  "obsidian:block.particle_type": "Particle Type",
  "obsidian:block.growable": "Growable",
  "obsidian:block.oxidizable_properties": "Oxidizable Properties",
  "obsidian:block.events": "Events",
  "obsidian:block.drop_information": "Drop Information",
  "obsidian:block.is_multi_block": "Is Multi-Block",
  "obsidian:block.multiblock_information": "Multiblock Information",
  "obsidian:block.placable_feature": "Placable Feature",
  "obsidian:block.display.model": "Model",
  "obsidian:block.display.item_model": "Item Model",
  "obsidian:block.display.block_model": "Block Model",
  "obsidian:block.display.lore": "Lore",

  "ohthetreesyoullgrow:feature.ohthetreesyoullgrow:tree_from_nbt_v1": "Tree from NBT v1",
  "ohthetreesyoullgrow.configured_feature.type": "Type",
  "ohthetreesyoullgrow.configured_feature.config": "Config",
  "ohthetreesyoullgrow.configured_feature.config.base_location": "Base location",
  "ohthetreesyoullgrow.configured_feature.config.base_location.help": "The path to the trunk structure piece.",
  "ohthetreesyoullgrow.configured_feature.config.canopy_location": "Canopy location",
  "ohthetreesyoullgrow.configured_feature.config.canopy_location.help": "The path to the canopy structure piece.",
  "ohthetreesyoullgrow.configured_feature.config.can_grow_on_filter": "Can grow on filter",
  "ohthetreesyoullgrow.configured_feature.config.can_grow_on_filter.help": "Block filter for which this tree is allowed to grow on. Checks all of the red wool positions defined by the trunk.",
  "ohthetreesyoullgrow.configured_feature.config.can_leaves_place_filter": "Can leaves place filter",
  "ohthetreesyoullgrow.configured_feature.config.can_leaves_place_filter.help": "Block filter for which this tree's leaves are allowed to place.",
  "ohthetreesyoullgrow.configured_feature.config.decorators": "Decorators",
  "ohthetreesyoullgrow.configured_feature.config.decorators.entry": "Decorator",
  "ohthetreesyoullgrow.configured_feature.config.height": "Height",
  "ohthetreesyoullgrow.configured_feature.config.height.help": "Int provider defining the height of the tree.",
  "ohthetreesyoullgrow.configured_feature.config.leaves_provider": "Leaves provider",
  "ohthetreesyoullgrow.configured_feature.config.leaves_target": "Leaves target",
  "ohthetreesyoullgrow.configured_feature.config.leaves_target.entry": "Block",
  "ohthetreesyoullgrow.configured_feature.config.log_provider": "Log provider",
  "ohthetreesyoullgrow.configured_feature.config.log_target": "Log target",
  "ohthetreesyoullgrow.configured_feature.config.log_target.entry": "Block",
  "ohthetreesyoullgrow.configured_feature.config.max_log_depth": "Max log depth",
  "ohthetreesyoullgrow.configured_feature.config.place_from_nbt": "Place from NBT",
  "ohthetreesyoullgrow.configured_feature.config.place_from_nbt.help": "Additional blocks from the structure pieces that should be placed in the world.",
  "ohthetreesyoullgrow.configured_feature.config.place_from_nbt.entry": "Block",
  "rule_test.blocks": "Blocks",
  "rule_test.fluid": "Fluid",

  "runecraftory.itemstack.item": "Item",
  "runecraftory.itemstack.count": "Count",
  "runecraftory.itemstack.tag": "NBT Tag",
  "runecraftory.crops.item": "Item",
  "runecraftory.crops.growth": "Growth",
  "runecraftory.crops.growth.help": "Time in days it takes to fully grow",
  "runecraftory.crops.maxDrops": "Max Drops",
  "runecraftory.crops.regrowable": "Regrowable",
  "runecraftory.crops.giantCrop": "Giant Crop",
  "runecraftory.crops.giantCrop.help": "The block this crop grows into when it reaches a fully giant state",
  "runecraftory.crops.bestSeason": "Best Season",
  "runecraftory.crops.bestSeason.help": "If current season matches this the crop gets a growth speed boost",
  "runecraftory.crops.badSeason": "Bad Season",
  "runecraftory.crops.badSeason.help": "If current season matches this the crop will grow slower",
  "runecraftory.food.item": "Item",
  "runecraftory.food.duration": "Duration",
  "runecraftory.food.duration.help": "Duration in ticks the effects of this food apply to",
  "runecraftory.food.effects": "Effects",
  "runecraftory.food.effects.help": "The boost in stats this food gives while its in effect",
  "runecraftory.food.effectsPercentage": "Effects percentage",
  "runecraftory.food.effectsPercentage.help": "Same as Effect but applies as a percentage to the current value",
  "runecraftory.food.cookingBonus": "Cooking Bonus",
  "runecraftory.food.cookingBonus.help": "The bonus this item applies to the food during crafting when used as additional material",
  "runecraftory.food.cookingBonusPercent": "Cooking Bonus Percentage",
  "runecraftory.food.cookingBonusPercent.help": "Same as Cooking Bonus but applies as a percentage",
  "runecraftory.food.potionApply": "Potions Apply",
  "runecraftory.food.potionApply.help": "Potions to apply when consuming this food",
  "runecraftory.food.potionRemove": "Potions Cure",
  "runecraftory.food.potionRemove.help": "Potions to cure when consuming this food",
  "runecraftory.item_stats.item": "Item",
  "runecraftory.item_stats.buyPrice": "Buy price",
  "runecraftory.item_stats.sellPrice": "Sell price",
  "runecraftory.item_stats.upgradeDifficulty": "Upgrade Difficulty",
  "runecraftory.item_stats.itemStats": "Stats",
  "runecraftory.item_stats.itemStats.help": "Stats of this item. If this item is a weapon or equipment the stats will be applied when worn, else the stats will be applied when used as an upgrade material",
  "runecraftory.item_stats.monsterBonus": "Monster Gift",
  "runecraftory.item_stats.monsterBonus.help": "The stats applied to a tamed monster when gifted this item",
  "runecraftory.item_stats.element": "Element",
  "runecraftory.item_stats.element.help": "Element of this item. If this item is a weapon this will be the default element, else the element will be applied when upgrading a weapon.",
  "runecraftory.item_stats.tier1Spell": "Tier 1 Spell",
  "runecraftory.item_stats.tier1Spell.help": "Spell applied to staffs when used as upgrade material",
  "runecraftory.item_stats.tier2Spell": "Tier 2 Spell",
  "runecraftory.item_stats.tier3Spell": "Tier 3 Spell",
  "runecraftory.gate_spawning.entity": "Entity",
  "runecraftory.gate_spawning.minDistanceFromSpawn": "Min Dist Spawn",
  "runecraftory.gate_spawning.minGateLevel": "Min Gate Level",
  "runecraftory.gate_spawning.canSpawnInWater": "Can Spawn Water",
  "runecraftory.gate_spawning.biomes": "Bioms",
  "runecraftory.gate_spawning.structures": "Structures",
  "runecraftory.gate_spawning.gatePredicate": "Entity Predicate",
  "runecraftory.npc_actions.actions": "NPC Actions",
  "runecraftory.npc_actions.actions.help": "List of selectable npc actions",
  "runecraftory.npc_actions.actions.entry.weight": "Weight",
  "runecraftory.npc_actions.actions.entry.predicate": "Entity Predicate",
  "runecraftory.npc_actions.actions.entry.concurrent_actions": "Actions",
  "runecraftory.npc_actions.actions.entry.concurrent_actions.help": "List of actions that are executed in order when this action entry is selected",
  "runecraftory.npc_actions.action.type": "Type",
  "runecraftory.npc_actions.action.duration": "Duration",
  "runecraftory.npc_actions.action.cooldown": "Cooldown",
  "runecraftory.npc_actions.action.walkTime": "Walk time",
  "runecraftory.npc_actions.action.walkTime.help": "Time in ticks the entity has to walk to its goal",
  "runecraftory.npc_actions.action.spell": "Spell",
  "runecraftory.npc_actions.action.range": "Range",
  "runecraftory.npc_actions.action.ignoreSeal": "Ignores sealed",
  "runecraftory.npc_actions.action.ignoreSeal.help": "If true can use spell regardless of being sealed or not",
  "runecraftory.npc_actions.action.items": "Items",
  "runecraftory.npc_actions.action.maxDist": "Max Dist",
  "runecraftory.npc_actions.action.maxDist.help": "Max distance the entity can be from its target while running this action",
  "runecraftory.conversations.fallbackKey": "Fallback Key",
  "runecraftory.conversations.fallbackKey.help": "The fallback response if nothing matches",
  "runecraftory.conversations.conversations": "Conversations",
  "runecraftory.conversations.conversations.help": "List of possible conversations. Every conversation needs a unique key to be identifiable",
  "runecraftory.conversations.conversations.translationKey": "Translation Key",
  "runecraftory.conversations.conversations.translationKey.help": "The translation key of this conversation. You can use a plain response text but thats not recommended as you won't be able to translate it.",
  "runecraftory.conversations.conversations.minHearts": "Min Hearts",
  "runecraftory.conversations.conversations.minHearts.help": "Minimum hearts required to pick this conversation",
  "runecraftory.conversations.conversations.maxHearts": "Max Hearts",
  "runecraftory.conversations.conversations.maxHearts.help": "Maximum hearts required to pick this conversation",
  "runecraftory.conversations.conversations.startingConversation": "Starting Conversation",
  "runecraftory.conversations.conversations.startingConversation.help": "If true indicates this is a conversation starter. If false this can only be picked if its part of a conversation chain",
  "runecraftory.conversations.conversations.actions": "Actions",
  "runecraftory.conversations.conversations.actions.help": "List of answer/choices the player can select",
  "runecraftory.conversations.conversations.actions.entry.translationKey": "Translation Key",
  "runecraftory.conversations.conversations.actions.entry.action": "Action",
  "runecraftory.conversations.conversations.actions.entry.actionValue": "Action Value",
  "runecraftory.conversations.conversations.actions.entry.actionValue.help": "If the action is ANSWER this should be the conversation id of the following conversation.\n If the action is QUEST this should be the quest id of the quest",
  "runecraftory.conversations.conversations.actions.entry.friendXP": "Friend points",
  "runecraftory.conversations.conversations.actions.entry.friendXP.help": "The friend points this gives when picked",
  "loot_condition_type.runecraftory:biome": "Biome",
  "condition.runecraftory:biome.biome_tag": "Biome Tag",
  "loot_condition_type.runecraftory:friend_points": "Friend points",
  "condition.runecraftory:friend_points.points": "Points",
  "loot_condition_type.runecraftory:interacting_player": "NPC Relation",
  "condition.runecraftory:interacting_player.relation": "Relation",
  "loot_condition_type.runecraftory:season": "Season",
  "condition.runecraftory:season.season": "Season",
  "loot_condition_type.runecraftory:skill_check": "Skill Level",
  "condition.runecraftory:skill_check.skill": "Skill",
  "condition.runecraftory:skill_check.min_required_level": "Level",
  "loot_condition_type.runecraftory:talk_count": "NPC Talk Count",
  "condition.runecraftory:talk_count.count": "Count",
  "runecraftory.npc_looks.gender": "Gender",
  "runecraftory.npc_looks.gender.help": "if gender is undefined both male and female npc can pick this look",
  "runecraftory.npc_looks.texture": "Texture",
  "runecraftory.npc_looks.texture.help": "Path to a texture in the assets directory. This requires the texture to exist on the client",
  "runecraftory.npc_looks.playerSkin": "Skin",
  "runecraftory.npc_looks.playerSkin.help": "Name of a player. The skin of the player will be applied. This does not require anything on the client",
  "runecraftory.npc_looks.weight": "Weight",
  "runecraftory.npc_looks.weight.help": "Weight that this look will get picked. If 0 this look cannot be picked and can only be applied if a npc data specifies this look",
  "runecraftory.npc_looks.additionalFeatures": "Features",
  "runecraftory.npc_looks.additionalFeatures.help": "Addition features for this npc. E.g. using the slim model",
  "runecraftory.look_features.id": "ID",
  "runecraftory.look_features.value": "Value",
  "runecraftory.npc_data.name": "Name",
  "runecraftory.npc_data.name.help": "If name is empty a random name will be chosen",
  "runecraftory.npc_data.surname": "Surname",
  "runecraftory.npc_data.surname.help": "Optional surname. Needs a defined name",
  "runecraftory.npc_data.gender": "Gender",
  "runecraftory.npc_data.gender.help": "If gender is undefined a random one will be chosen",
  "runecraftory.npc_data.profession": "Professions",
  "runecraftory.npc_data.profession.help": "List of possible professions for this npc. One will be picked. If empty a random one will be picked",
  "runecraftory.npc_data.look": "Look",
  "runecraftory.npc_data.look.help": "ID to a look. If empty a random one will be picked",
  "runecraftory.npc_data.birthday": "Birthday",
  "runecraftory.npc_data.birthday.help": "If undefined a random one will be generated",
  "runecraftory.npc_data.neutralGiftResponse": "Neutral gift response",
  "runecraftory.npc_data.neutralGiftResponse.help": "Translation key for a neutral gift response",
  "runecraftory.npc_data.interactions": "Interactions",
  "runecraftory.npc_data.interactions.help": "This should be a valid id that points to a conversation set (Define one via the conversation generator). Every context should to be defined or else a generic message will be displayed",
  "runecraftory.error.missing.contexts": "Missing conversation context!",
  "runecraftory.npc_data.questHandler": "Quests",
  "runecraftory.npc_data.questHandler.responses": "Responses",
  "runecraftory.npc_data.questHandler.responses.help": "Responses to quests. The key should be the id of the quest",
  "runecraftory.npc_data.questHandler.responses.startID": "Start",
  "runecraftory.npc_data.questHandler.responses.startID.help": "Conversation ID when starting the quest",
  "runecraftory.npc_data.questHandler.responses.activeID": "Active",
  "runecraftory.npc_data.questHandler.responses.activeID.help": "Conversation ID when the quest was started but not done",
  "runecraftory.npc_data.questHandler.responses.hasSequence": "Has Sequence",
  "runecraftory.npc_data.questHandler.responses.hasSequence.help": "If true indicates that there are multiple steps in the quest. Each step increases an internal counter that gets appended to the active id (if > 0).\n\n E.g. when the quest was started the counter is 0 so <Active ID> gets picked. When progressing and the counter is 1 a conversation with <Active ID>_1 gets picked.",
  "runecraftory.npc_data.questHandler.responses.endID": "End",
  "runecraftory.npc_data.questHandler.responses.endID.help": "Conversation ID when the quest was finished",
  "runecraftory.npc_data.questHandler.requiredQuests": "Required quests",
  "runecraftory.npc_data.questHandler.requiredQuests.help": "List of required quests to enter a relation ship with this npc. (WIP)",
  "runecraftory.npc_data.giftItems": "Gifts",
  "runecraftory.npc_data.giftItems.help": "List of gift items. Items not here will be treated as neutral gifts giving 15 xp",
  "runecraftory.npc_data.giftItems.items": "Item",
  "runecraftory.npc_data.giftItems.items.help": "If empty a random item tag from the npc_gifts pool will be picked based on the friend points defined",
  "runecraftory.npc_data.giftItems.responseKey": "Response Key",
  "runecraftory.npc_data.giftItems.xp": "XP",
  "runecraftory.npc_data.giftItems.xp.help": "Amount of friend points xp to give",
  "runecraftory.npc_data.schedule": "Schedule",
  "runecraftory.npc_data.schedule.help": "The schedule of the npc. If not defined a random one will be generated",
  "runecraftory.npc_data.schedule.wakeUpTime": "Wake up time",
  "runecraftory.npc_data.schedule.workTime": "Work time",
  "runecraftory.npc_data.schedule.breakTime": "Break time",
  "runecraftory.npc_data.schedule.workTimeAfter": "Work time 2",
  "runecraftory.npc_data.schedule.doneWorkTime": "End of work time",
  "runecraftory.npc_data.schedule.meetTime": "Meetup time",
  "runecraftory.npc_data.schedule.meetTime.help": "NPC will meet at town centers when its not a workday for them",
  "runecraftory.npc_data.schedule.meetTimeAfter": "Meetup after time",
  "runecraftory.npc_data.schedule.sleepTime": "Sleep time",
  "runecraftory.npc_data.schedule.workDays": "Work Days",
  "runecraftory.npc_data.combat": "Combat",
  "runecraftory.npc_data.combat.baseStats": "Base Stats",
  "runecraftory.npc_data.combat.baseStats.help": "The base stats of the npc. If undefined default values will be picked",
  "runecraftory.npc_data.combat.statIncrease": "Stat Increase",
  "runecraftory.npc_data.combat.statIncrease.help": "The stats an npc gains per level up. If undefined default values will be picked",
  "runecraftory.npc_data.combat.baseLevel": "Initial level",
  "runecraftory.npc_data.combat.combatActions": "Combat actions",
  "runecraftory.npc_data.combat.combatActions.help": "ID of an npc action (See NPC Actions generator)",
  "runecraftory.npc_data.unique": "Unique",
  "runecraftory.npc_data.unique.help": "Amount of npcs in the world that can are the same as this one. If there are more than the defined value here then no npc of this type can spawn.",
  "runecraftory.npc_data.relationShipState": "Relationship State",
  "simplequests.quest.type.runecraftory:npc_quest": "NPC Quest (RuneCraftory)",
  "simplequests.quest.runecraftory:npc_quest.npc_id": "NPC data ID",
  "simplequests.quest.runecraftory:npc_quest.npc_id.help": "ID of an npc data this quest can apply to",
  "simplequests.quest.runecraftory:npc_quest.quest": "Quest",
  "simplequests.quest.runecraftory:npc_quest.quest.help": "ID of the actual quest. Idealy the quest should not be acceptable via normal means (e.g. set needs_unlock to true)",
  "simplequests.quest.type.runecraftory:quest_board_quest": "Questboard Quest (RuneCraftory)",
  "simplequests.quest.runecraftory:quest_board_quest.wrappedQuest": "Quest",
  "simplequests.quest.runecraftory:quest_board_quest.wrappedQuest.help": "ID of the actual quest. Idealy the quest should not be acceptable via normal means (e.g. set needs_unlock to true)",

  "simplequests.itemstack.item": "Item",
  "simplequests.itemstack.count": "Count",
  "simplequests.itemstack.tag": "NBT Tag",
  "simplequests.quest_category.name": "Name",
  "simplequests.quest_category.description": "Description",
  "simplequests.quest_category.icon": "Icon",
  "simplequests.quest_category.only_same_category": "Count only same category",
  "simplequests.quest_category.max_concurrent_quests": "Max concurrent quests",
  "simplequests.quest_category.sorting_id": "Sorting ID",
  "simplequests.quest_category.sorting_id.help": "Defines the order in which categories show up in the GUI",
  "simplequests.quest_category.selectable": "Is selectable",
  "simplequests.quest_category.selectable.help": "If false then this category will not show up in the GUI",
  "simplequests.quest_category.is_visible": "Is visible",
  "simplequests.quest_category.is_visible.help": "If true quests in this category are not visible e.g. when checked via /simplequests current",
  "simplequests.quest.category": "Category",
  "simplequests.quest.task": "Task",
  "simplequests.quest.task.help": "Simple title of the quest. Usually showing what to do etc.",
  "simplequests.quest.description": "Description",
  "simplequests.quest.description.help": "More in depth description of the quest",
  "simplequests.quest.parent": "Parent Quests",
  "simplequests.quest.parent.help": "Quests needed to be completed before being able to accept this quest",
  "simplequests.quest.redo_parent": "Redo Parent Quests",
  "simplequests.quest.redo_parent.help": "If true will need to redo all parent quests upon completion",
  "simplequests.quest.need_unlock": "Needs Unlocking",
  "simplequests.quest.need_unlock.help": "If true needs outside sources to unlock this quest (e.g. through a command)",
  "simplequests.quest.unlock_condition": "Quest Condition",
  "simplequests.quest.icon": "Icon",
  "simplequests.quest.repeat_delay": "Repeat Delay",
  "simplequests.quest.repeat_daily": "Daily Repeats",
  "simplequests.quest.sorting_id": "Sorting ID",
  "simplequests.quest.sorting_id.help": "Defines the order in which quests show up in the GUI",
  "simplequests.quest.daily_quest": "Is Daily Quest",
  "simplequests.quest.type": "Type",
  "simplequests.quest.type.simplequests:quest": "Quest",
  "simplequests.quest.type.help": "The type of quest",
  "simplequests.quest.type.simplequests:composite_quest": "Composite Quest",
  "simplequests.quest.simplequests:composite_quest.quests": "Quests",
  "simplequests.quest.simplequests:composite_quest.quests.help": "Selectable quests",
  "simplequests.quest.simplequests:sequential_quest.command": "Command on finish",
  "simplequests.quest.type.simplequests:sequential_quest": "Sequential Quest",
  "simplequests.quest.simplequests:sequential_quest.quests": "Quests",
  "simplequests.quest.simplequests:sequential_quest.loot_table": "Loot table",
  "simplequests.quest.simplequests:quest.command": "Command on finish",
  "simplequests.quest.simplequests:quest.submission_trigger": "Submission Trigger",
  "simplequests.quest.simplequests:quest.entries": "Quest Entries",
  "simplequests.quest.simplequests:quest.loot_table": "Loot table",
  "simplequests.quest_entries.description": "Description",
  "simplequests.quest_entries.description.help": "Description of what to do for this quest entry",
  "simplequests.quest_entries.amount": "Amount",
  "simplequests.quest_entries.consumeItems": "Consume Items",
  "simplequests.quest_entries.pos": "Position",
  "simplequests.quest_entries.pos.x": "X",
  "simplequests.quest_entries.pos.y": "Y",
  "simplequests.quest_entries.pos.z": "Z",
  "simplequests.quest_entries.minDist": "Min distance",
  "simplequests.quest_entries.item": "Item",
  "simplequests.quest_entries.consume": "Consume items",
  "simplequests.quest_entries.taskDescription": "Subtask description",
  "simplequests.quest_entries.itemPredicates": "Item Predicates",
  "simplequests.quest_entries.entityPredicates": "Entity Predicates",
  "simplequests.quest_entries.predicate.description": "Task Description",
  "simplequests.quest_entries.predicate.value": "Predicate",
  "simplequests.quest_entries.pos.description": "Task Description",
  "simplequests.quest_entries.pos.value": "Value",
  "simplequests.quest_entries.block": "Block",
  "simplequests.quest_entries.blockPredicates": "Block Predicates",
  "simplequests.quest_entries.use": "Right click",
  "simplequests.quest_entries.use.help": "If true needs to right click the block. Else needs to mine the block",
  "simplequests.quest_entries.consumeItem": "Consume items",
  "simplequests.quest_entries.playerPredicate": "Player Predicates",
  "error.invalid.value.time": "Invalid time format"
}
